# -*- coding: utf-8 -*-
"""20220720-DNN_mnist

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/y-h-liao/490737b1d1ac2a63a5c920e23ea29ab9/20220720-dnn_mnist.ipynb
"""

import tensorflow as tf

print(tf.__version__)

! /opt/bin/nvidia-smi

(x_train,y_train),(x_test,y_test)= tf.keras.datasets.mnist.load_data()

x_train.shape

x_train[0]

#把它畫出來
#畫出MNIST

import matplotlib.pyplot as plt
plt.gcf().set_size_inches(15,4)
for i in range(5):
  ax = plt.subplot(1,5,i+1)
  ax.imshow(x_train[i],cmap='gray') #cmap='binary'會白底黑字
  ax.set_title('label='+str(y_train[i]),fontsize=18)
plt.show()

#處理資料 
#把資料轉換到0~1之間
#因為灰階值範圍是0~255

x_train = x_train/255
x_test = x_test/255

x_train.shape

x_train = x_train.reshape((60000,28,28,1))
x_test =  x_test.reshape((10000,28,28,1))

"""開始建立模型"""

from tensorflow.keras import layers
from tensorflow import keras

CNN = keras.Sequential(name="CNNNetwork") #通常用 model = keras.Sequencial()

CNN.add(layers.Conv2D(filters = 32,
                      kernel_size = (3,3),
                      activation = 'relu', #sigmoid 
                      padding = 'same',
                      input_shape = (28,28,1) #第一層才需要指定input_shape
                      ))

keras.utils.plot_model(CNN,show_shapes=True)

CNN.add(layers.MaxPool2D(2,2))

CNN.add(layers.Conv2D(filters = 64,
                      kernel_size = (3,3),
                      activation = 'relu', #sigmoid 
                      padding = 'same'                      
                      ))

CNN.add(layers.MaxPool2D(2,2))

keras.utils.plot_model(CNN,show_shapes=True)

print(CNN.summary())

#parm# 怎麼來的
#320 :
#filter size 3x3
#28,28,1 的 1 (channel)
#wx+b (1 bias)
#((3x3x1)+1) x 32 = 320

#18496 = ((3x3x32)+1)*64

CNN.add(layers.Flatten())

keras.utils.plot_model(CNN,show_shapes=True)

CNN.add(layers.Dense(128,activation='relu'))
CNN.add(layers.Dense(64,activation='relu'))

#輸出層
CNN.add(layers.Dense(10,activation='softmax')) #sigmoid

keras.utils.plot_model(CNN,show_shapes=True)

print(CNN.summary())

CNN.compile(optimizer='Adam',
            loss = keras.losses.sparse_categorical_crossentropy,
            metrics=['accuracy'])

train_history=CNN.fit(x=x_train,
                      y=y_train,
                      epochs = 20,
                      batch_size = 300,
                      validation_split = 0.2,
                      verbose = 2
                      )

#overfitting

#共用
import matplotlib.pyplot as plt
def show_train_history(show_train_value,test_value):
    plt.plot(train_history.history[show_train_value])
    plt.plot(train_history.history[test_value])
    plt.title('Train History')
    plt.ylabel(show_train_value)
    plt.xlabel('Epoch')
    plt.legend(['train', 'test'], loc='upper left')
    plt.show()

show_train_history('accuracy','val_accuracy')
show_train_history('loss','val_loss')

import numpy as np

np.mean( np.argmax(CNN.predict(x_test), axis=-1) ==y_test )

(1==1) + (2==2)

x_test.shape

prediction = CNN.predict(x_test)

prediction.shape

"""上面錯誤示範"""

prediction = (np.argmax(CNN.predict(x_test), axis=-1))

prediction.shape

a = np.array([3,1,2,5,6,1])
print(np.argmax(a))
print(a[np.argmax(a)])
print(a[-2])

b = np.array([[1,2,3,4],
              [3,4,5,7],
             [5,7,9,8]])
print(b)
print(np.argmax(b,axis=1))

y_test

import pandas as pd
pd.crosstab(y_test,prediction,
            rownames=['label'],colnames=['predict'])

#num=10可以改
#idx代表從哪張圖開始畫
import matplotlib.pyplot as plt 
def plot_images_labels_prediction(images,labels,prediction,idx,num=10):
    fig = plt.gcf()
    fig.set_size_inches(12, 14)
    if num>25: num=25
    images = images.reshape(images.shape[0],28,28)
    for i in range(0, num):
        ax=plt.subplot(5,5, 1+i)
        ax.imshow(images[idx], cmap='binary')

        ax.set_title("label=" +str(labels[idx])+
                     ",predict="+str(prediction[idx])
                     ,fontsize=10,color='red') 
        
        ax.set_xticks([]);ax.set_yticks([])        
        idx+=1 
    plt.show()

plot_images_labels_prediction(x_test,y_test,prediction,idx=0,num=5)

#把答案跟預測存在Dataframe
df = pd.DataFrame({
    'label': y_test,
    'predict': prediction
})

df.head()

df [ (df.label==5) & (df.predict==3) ]

plot_images_labels_prediction(x_test,y_test,prediction,idx=340,num=5)

